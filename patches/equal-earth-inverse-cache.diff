diff --git a/src/com/jhlabs/map/proj/EqualEarthProjection.java b/src/com/jhlabs/map/proj/EqualEarthProjection.java
index bfd470f..01fed9a 100644
--- a/src/com/jhlabs/map/proj/EqualEarthProjection.java
+++ b/src/com/jhlabs/map/proj/EqualEarthProjection.java
@@ -38,6 +38,10 @@ public class EqualEarthProjection extends PseudoCylindricalProjection {
 
     private static final double M = Math.sqrt(3) / 2.0;
 
+    double lastY = -1000.0;
+    double lastParamLat = -1000.0;
+    double lastLat = -1000.0;
+
     @Override
     public Point2D.Double project(double lon, double lat, Point2D.Double xy) {
         double paramLat = Math.asin(M * Math.sin(lat));
@@ -56,18 +60,23 @@ public class EqualEarthProjection extends PseudoCylindricalProjection {
     public Point2D.Double projectInverse(double x, double y, Point2D.Double lonLat) {
         final double EPS = 1.0e-9;
         final int NITER = 10;
-        
-        double paramLat = y, paramLatSq, paramLatPow6, fy, fpy, dlat;
-        int i;
-        for (i = 0; i < NITER; ++i) {
-            paramLatSq = paramLat * paramLat;
-            paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
+        final boolean useLast = y == lastY;
 
-            fy = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq)) - y;
-            fpy = A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq);
-            paramLat -= dlat = fy / fpy;
-            if (Math.abs(dlat) < EPS) {
-                break;
+        double paramLat = y, paramLatSq, paramLatPow6, fy, fpy, dlat;
+        if (useLast) {
+            paramLat = lastParamLat;
+        } else {
+            int i;
+            for (i = 0; i < NITER; ++i) {
+                paramLatSq = paramLat * paramLat;
+                paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
+    
+                fy = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq)) - y;
+                fpy = A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq);
+                paramLat -= dlat = fy / fpy;
+                if (Math.abs(dlat) < EPS) {
+                    break;
+                }
             }
         }
 
@@ -75,7 +84,16 @@ public class EqualEarthProjection extends PseudoCylindricalProjection {
         paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
         double lon = M * x * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq))
                 / Math.cos(paramLat);
-        double lat = Math.asin(Math.sin(paramLat) / M);
+        double lat;
+        if (useLast) {
+            lat = lastLat;
+        } else {
+            lat = Math.asin(Math.sin(paramLat) / M);
+        }
+
+        lastY = y;
+        lastParamLat = paramLat;
+        lastLat = lat;
         
         lonLat.x = lon;
         lonLat.y = lat;
